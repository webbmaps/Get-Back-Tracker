{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1b9df9fa-6a57-4311-b4ca-8807a333b42d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-10 18:01:46.903 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:01:46.904 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:01:47.349 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\User\\Desktop\\Python\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-05-10 18:01:47.350 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:01:47.351 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:01:47.351 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:01:47.353 No runtime found, using MemoryCacheStorageManager\n",
      "2025-05-10 18:01:47.354 No runtime found, using MemoryCacheStorageManager\n",
      "2025-05-10 18:01:47.355 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:01:47.356 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:01:47.357 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:01:47.854 Thread 'Thread-3': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:01:47.856 Thread 'Thread-3': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:02:01.057 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:02:01.059 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:02:01.169 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:02:01.315 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:02:01.315 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:02:01.316 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:02:01.317 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:02:01.319 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-10 18:02:01.320 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DeltaGenerator(_root_container=1, _parent=DeltaGenerator())"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import leafmap.foliumap as leafmap\n",
    "import geopandas as gpd\n",
    "import networkx as nx\n",
    "from shapely.geometry import Point, LineString\n",
    "import math\n",
    "\n",
    "# Set page config\n",
    "st.set_page_config(layout=\"wide\")\n",
    "\n",
    "# Title\n",
    "st.title(\"ðŸš¶ Hiking Trail Navigator\")\n",
    "st.markdown(\"\"\"\n",
    "1. Allow location access to see your current position\n",
    "2. Click anywhere on the map to set your destination\n",
    "3. The app will calculate the shortest trail route\n",
    "\"\"\")\n",
    "\n",
    "# Load trail data\n",
    "@st.cache_data\n",
    "def load_data():\n",
    "    trails_url = 'https://raw.githubusercontent.com/webbmaps/Get-Back-Tracker/main/trails.geojson'\n",
    "    lusk_url = 'https://raw.githubusercontent.com/webbmaps/Get-Back-Tracker/main/lusk.geojson'\n",
    "    \n",
    "    trail_gdf = gpd.read_file(trails_url)\n",
    "    wilderness_gdf = gpd.read_file(lusk_url)\n",
    "    \n",
    "    # Build graph from trail lines\n",
    "    G = nx.Graph()\n",
    "    for _, row in trail_gdf.iterrows():\n",
    "        coords = list(row.geometry.coords)\n",
    "        for i in range(len(coords) - 1):\n",
    "            a, b = coords[i], coords[i+1]\n",
    "            dist = math.sqrt((a[0]-b[0])**2 + (a[1]-b[1])**2)\n",
    "            G.add_edge(a, b, weight=dist)\n",
    "    \n",
    "    return G, trail_gdf, wilderness_gdf\n",
    "\n",
    "G, trails, wilderness = load_data()\n",
    "\n",
    "# Initialize map\n",
    "m = leafmap.Map(\n",
    "    draw_control=False,\n",
    "    scale_control=True,\n",
    "    layer_control=True,\n",
    "    attribution_control=True,\n",
    "    center=[37.5, -88.7],\n",
    "    zoom=13\n",
    ")\n",
    "\n",
    "# Add layers\n",
    "m.add_geojson(\n",
    "    wilderness.to_json(),\n",
    "    style={'color': 'grey', 'weight': 2, 'fillColor': 'transparent'},\n",
    "    layer_name='Wilderness Area'\n",
    ")\n",
    "\n",
    "m.add_geojson(\n",
    "    trails.to_json(),\n",
    "    style={'color': 'brown', 'weight': 3},\n",
    "    layer_name='Trails'\n",
    ")\n",
    "\n",
    "m.add_basemap('Esri.WorldImagery')\n",
    "\n",
    "# Add locate control to find user position\n",
    "m.add_child(leafmap.plugins.LocateControl(auto_start=False))\n",
    "\n",
    "# Display map and capture clicks\n",
    "map_data = m.to_streamlit(height=600, bidirectional=True)\n",
    "\n",
    "# Process user location and clicks\n",
    "if map_data.get('last_clicked'):\n",
    "    dest_point = Point(map_data['last_clicked']['lng'], map_data['last_clicked']['lat'])\n",
    "    \n",
    "    # Get user location (from browser or default)\n",
    "    user_lat = map_data.get('last_position', {}).get('lat', 37.49)\n",
    "    user_lon = map_data.get('last_position', {}).get('lng', -88.72)\n",
    "    user_point = Point(user_lon, user_lat)\n",
    "    \n",
    "    # Find nearest nodes on trail network\n",
    "    start_node = min(G.nodes, key=lambda n: Point(n).distance(user_point))\n",
    "    end_node = min(G.nodes, key=lambda n: Point(n).distance(dest_point))\n",
    "    \n",
    "    try:\n",
    "        # Calculate shortest path\n",
    "        path = nx.shortest_path(G, source=start_node, target=end_node, weight='weight')\n",
    "        \n",
    "        # Create a line for the path\n",
    "        route_line = LineString(path)\n",
    "        \n",
    "        # Add to map\n",
    "        m.add_gdf(\n",
    "            gpd.GeoDataFrame(geometry=[route_line], crs='EPSG:4326'),\n",
    "            style={'color': 'red', 'weight': 5},\n",
    "            layer_name='Route'\n",
    "        )\n",
    "        \n",
    "        # Add markers\n",
    "        m.add_marker(location=[user_lat, user_lon], tooltip=\"You\")\n",
    "        m.add_marker(location=[dest_point.y, dest_point.x], tooltip=\"Destination\")\n",
    "        \n",
    "        # Calculate distance\n",
    "        distance = sum(math.sqrt((path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2) \n",
    "                  for i in range(len(path)-1))\n",
    "        distance_miles = distance * 69  # approximate conversion to miles\n",
    "        \n",
    "        st.success(f\"Found route! Distance: {distance_miles:.2f} miles\")\n",
    "        \n",
    "        # Redisplay map with route\n",
    "        m.to_streamlit(height=600)\n",
    "        \n",
    "    except nx.NetworkXNoPath:\n",
    "        st.error(\"No trail route found between these points\")\n",
    "    except Exception as e:\n",
    "        st.error(f\"Error calculating route: {str(e)}\")\n",
    "\n",
    "# Instructions\n",
    "st.sidebar.markdown(\"\"\"\n",
    "### How to Use:\n",
    "1. Click the location icon (top right) to set your current position\n",
    "2. Click anywhere on the map to set your destination\n",
    "3. The app will calculate the shortest trail route\n",
    "\n",
    "### Features:\n",
    "- Real-time location tracking\n",
    "- Trail network analysis\n",
    "- Shortest path calculation\n",
    "- Distance measurement\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "f2338352-ad7c-4253-8fd0-d31b17d85794",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
